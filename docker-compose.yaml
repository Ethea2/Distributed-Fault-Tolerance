version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - frontend-network
    environment:
      - VITE_API_URL=http://localhost/api

  # API Gateway
  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - frontend-network
      - backend-network
    environment:
      - PORT=8000
      - AUTH_SERVICE_URL=http://auth-service:8080
      - COURSE_SERVICE_URL=http://course-service:8080
      - GRADE_SERVICE_URL=http://grade-service:8080
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
    depends_on:
      - auth-service
      - course-service
      - grade-service

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    networks:
      - backend-network
      - db-network
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgrespassword}
      - DB_NAME=enrollment_system
      - DB_SCHEMA=auth
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
    depends_on:
      postgres:
        condition: service_healthy

  # Course Service
  course-service:
    build:
      context: .
      dockerfile: ./services/course-service/Dockerfile
    networks:
      - backend-network
      - db-network
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgrespassword}
      - DB_NAME=enrollment_system
      - DB_SCHEMA=courses
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
    depends_on:
      postgres:
        condition: service_healthy

  # Grade Service
  grade-service:
    build:
      context: .
      dockerfile: ./services/grade-service/Dockerfile
    networks:
      - backend-network
      - db-network
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgrespassword}
      - DB_NAME=enrollment_system
      - DB_SCHEMA=grades
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
    depends_on:
      postgres:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgrespassword}
      - POSTGRES_DB=enrollment_system
    ports:
      - "5432:5432"
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-pgadminpassword}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - db-network
    depends_on:
      - postgres

networks:
  frontend-network:
  backend-network:
  db-network:

volumes:
  postgres_data:
  pgadmin_data:
